package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

//go:generate goyacc -p pk -o pk_generated.go pk.y

func main() {

	out := flag.String("out", "", "output file")

	flag.Parse()

	args := flag.Args()
	if len(args) == 0 {
		fmt.Printf("Usage: pk [-out={outputfile}] {inputfile}\n")
		os.Exit(1)
	}
	infname := args[0]
	inbase, found := strings.CutSuffix(infname, ".k")
	if !found {
		fmt.Printf("Error: only works on *.k files\n")
		os.Exit(1)
	}
	if *out == "" {
		outfname := inbase + ".go"
		out = &outfname
	}
	contents, err := os.ReadFile(infname)
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}
	outf, err := os.Create(*out)
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}
	outf.WriteString("// Generated by pk, do not edit.\n")
	outf.WriteString("package player\n\n")
	outf.WriteString("import (\n\t\"github.com/palette/kit\"\n)\n")
	parser := pkNewParser()
	lex := &pkLex{
		line: contents,
		outf: outf,
	}
	r := parser.Parse(lex)
	if r != 0 {
		fmt.Printf("Parse returns ERROR!?\n")
	}
	outf.Close()
}
