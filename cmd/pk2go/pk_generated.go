// Code generated by goyacc -p pk -o pk_generated.go pk.y. DO NOT EDIT.

//line pk.y:1

package main

import __yyfmt__ "fmt"

//line pk.y:4

//line pk.y:7
type pkSymType struct {
	yys  int
	node *Node
	// outf *os.File	// transliterated output is sent here
	// sym string		// symbol table pointer
	// in string		// machine instruction
	// // num int		// number of arguments
	// val int			// numeric constant
	// dbl float64		// floating constant
	// str!string		// string constant
	// phr string		// phrase constant
}

const VAR = 57346
const UNDEF = 57347
const MACRO = 57348
const TOGLOBSYM = 57349
const QMARK2 = 57350
const DOLLAR2 = 57351
const WHILE = 57352
const DOTDOTDOT = 57353
const IF = 57354
const ELSE = 57355
const FOR = 57356
const SYM_IN = 57357
const BEINGREAD = 57358
const EVAL = 57359
const BREAK = 57360
const CONTINUE = 57361
const TASK = 57362
const SYM_DELETE = 57363
const UNDEFINE = 57364
const RETURN = 57365
const FUNC = 57366
const DEFINED = 57367
const READONLY = 57368
const ONCHANGE = 57369
const GLOBALDEC = 57370
const CLASS = 57371
const METHOD = 57372
const KW_NEW = 57373
const NARGS = 57374
const TYPEOF = 57375
const XY = 57376
const DUR = 57377
const VOL = 57378
const TIME = 57379
const CHAN = 57380
const PITCH = 57381
const LENGTH = 57382
const NUMBER = 57383
const TYPE = 57384
const ATTRIB = 57385
const FLAGS = 57386
const VARG = 57387
const PORT = 57388
const PHRASE = 57389
const STRING = 57390
const NAME = 57391
const INTEGER = 57392
const OBJECT = 57393
const DOUBLE = 57394
const SEQUENCE = 57395
const SELECTION = 57396
const FUNCCALL = 57397
const PRMLIST = 57398
const PARAM = 57399
const ARRITEMEQ = 57400
const EQUALS = 57401
const PLUSEQ = 57402
const MINUSEQ = 57403
const MULEQ = 57404
const DIVEQ = 57405
const AMPEQ = 57406
const INC = 57407
const DEC = 57408
const PREINC = 57409
const PREDEC = 57410
const POSTINC = 57411
const POSTDEC = 57412
const OREQ = 57413
const XOREQ = 57414
const RSHIFTEQ = 57415
const LSHIFTEQ = 57416
const OR = 57417
const AND = 57418
const GT = 57419
const GE = 57420
const LT = 57421
const LE = 57422
const EQ = 57423
const NE = 57424
const REGEXEQ = 57425
const LSHIFT = 57426
const RSHIFT = 57427
const UNARYMINUS = 57428
const BANG = 57429

var pkToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"VAR",
	"UNDEF",
	"MACRO",
	"TOGLOBSYM",
	"QMARK2",
	"DOLLAR2",
	"WHILE",
	"DOTDOTDOT",
	"IF",
	"ELSE",
	"FOR",
	"SYM_IN",
	"BEINGREAD",
	"EVAL",
	"BREAK",
	"CONTINUE",
	"TASK",
	"SYM_DELETE",
	"UNDEFINE",
	"RETURN",
	"FUNC",
	"DEFINED",
	"READONLY",
	"ONCHANGE",
	"GLOBALDEC",
	"CLASS",
	"METHOD",
	"KW_NEW",
	"NARGS",
	"TYPEOF",
	"XY",
	"DUR",
	"VOL",
	"TIME",
	"CHAN",
	"PITCH",
	"LENGTH",
	"NUMBER",
	"TYPE",
	"ATTRIB",
	"FLAGS",
	"VARG",
	"PORT",
	"PHRASE",
	"STRING",
	"NAME",
	"INTEGER",
	"OBJECT",
	"DOUBLE",
	"SEQUENCE",
	"SELECTION",
	"FUNCCALL",
	"PRMLIST",
	"PARAM",
	"ARRITEMEQ",
	"EQUALS",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"AMPEQ",
	"INC",
	"DEC",
	"PREINC",
	"PREDEC",
	"POSTINC",
	"POSTDEC",
	"OREQ",
	"XOREQ",
	"RSHIFTEQ",
	"LSHIFTEQ",
	"'$'",
	"'='",
	"'?'",
	"':'",
	"OR",
	"AND",
	"'|'",
	"'^'",
	"'&'",
	"GT",
	"GE",
	"LT",
	"LE",
	"EQ",
	"NE",
	"REGEXEQ",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UNARYMINUS",
	"BANG",
	"'~'",
	"'%'",
	"'.'",
	"';'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"','",
	"'['",
	"']'",
}

var pkStatenames = [...]string{}

const pkEofCode = 1
const pkErrCode = 2
const pkInitialStackSize = 16

//line pk.y:798

//line yacctab:1
var pkExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 163,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 59,
	-1, 164,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 60,
	-1, 165,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 61,
	-1, 166,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 62,
	-1, 167,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 63,
	-1, 168,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 64,
	-1, 169,
	84, 0,
	85, 0,
	86, 0,
	87, 0,
	88, 0,
	89, 0,
	90, 0,
	-2, 65,
	-1, 326,
	15, 81,
	60, 81,
	61, 81,
	62, 81,
	63, 81,
	64, 81,
	65, 81,
	66, 81,
	71, 81,
	72, 81,
	73, 81,
	74, 81,
	76, 81,
	77, 81,
	79, 81,
	80, 81,
	81, 81,
	82, 81,
	83, 81,
	84, 81,
	85, 81,
	86, 81,
	87, 81,
	88, 81,
	89, 81,
	90, 81,
	91, 81,
	92, 81,
	93, 81,
	94, 81,
	95, 81,
	96, 81,
	100, 81,
	101, 81,
	103, 81,
	105, 81,
	108, 81,
	-2, 84,
}

const pkPrivate = 57344

const pkLast = 2738

var pkAct = [...]int16{
	7, 181, 2, 192, 255, 236, 57, 3, 262, 116,
	175, 79, 5, 288, 104, 103, 100, 200, 279, 199,
	180, 231, 117, 226, 187, 347, 340, 338, 337, 131,
	177, 134, 135, 136, 137, 138, 139, 317, 178, 318,
	141, 292, 291, 289, 120, 119, 123, 121, 124, 125,
	129, 126, 127, 128, 217, 122, 218, 215, 176, 216,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 189, 26, 344, 184, 316, 313,
	219, 79, 223, 309, 130, 245, 339, 101, 186, 86,
	106, 60, 335, 333, 59, 111, 113, 326, 298, 191,
	290, 195, 179, 197, 287, 133, 188, 285, 283, 278,
	247, 246, 194, 244, 241, 140, 234, 230, 225, 146,
	149, 184, 211, 207, 323, 308, 87, 88, 89, 90,
	92, 83, 84, 299, 212, 213, 214, 91, 93, 94,
	95, 202, 96, 61, 284, 81, 80, 67, 69, 68,
	72, 74, 73, 75, 76, 78, 77, 70, 71, 63,
	64, 65, 66, 280, 227, 79, 62, 85, 223, 86,
	224, 60, 208, 336, 59, 101, 79, 196, 99, 144,
	143, 142, 130, 190, 110, 193, 109, 184, 237, 108,
	198, 117, 243, 107, 229, 97, 302, 233, 58, 184,
	242, 184, 264, 304, 130, 174, 294, 98, 204, 259,
	250, 261, 260, 265, 184, 83, 84, 270, 271, 249,
	296, 251, 272, 115, 275, 276, 83, 84, 297, 118,
	273, 256, 79, 277, 266, 147, 263, 82, 274, 6,
	1, 0, 0, 0, 286, 65, 66, 0, 295, 282,
	62, 85, 0, 86, 0, 60, 0, 0, 59, 0,
	0, 0, 293, 101, 86, 0, 60, 0, 0, 59,
	270, 307, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 0, 0, 0, 0, 0,
	319, 258, 0, 258, 0, 310, 320, 0, 0, 184,
	237, 321, 322, 327, 325, 194, 328, 0, 0, 329,
	0, 331, 330, 0, 334, 0, 281, 62, 85, 0,
	86, 0, 60, 0, 0, 59, 0, 343, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 79, 27, 37, 16, 0, 18, 0, 17, 0,
	0, 35, 9, 10, 39, 13, 20, 8, 43, 29,
	14, 15, 11, 44, 315, 19, 40, 41, 42, 47,
	46, 50, 48, 51, 52, 56, 53, 54, 55, 0,
	49, 25, 24, 45, 22, 38, 23, 0, 0, 0,
	0, 83, 84, 258, 0, 0, 0, 0, 0, 33,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	72, 74, 73, 75, 76, 78, 77, 70, 71, 63,
	64, 65, 66, 0, 0, 0, 62, 85, 30, 86,
	0, 60, 32, 31, 59, 0, 4, 28, 79, 12,
	0, 0, 21, 27, 37, 16, 0, 18, 0, 17,
	0, 0, 35, 9, 10, 39, 13, 20, 8, 43,
	29, 14, 15, 11, 44, 0, 19, 40, 41, 42,
	47, 46, 50, 48, 51, 52, 56, 53, 54, 55,
	0, 49, 25, 24, 45, 22, 38, 23, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 70, 71, 63, 64, 65, 66,
	0, 0, 0, 62, 85, 0, 86, 0, 60, 30,
	0, 59, 0, 32, 31, 0, 0, 0, 28, 79,
	12, 0, 0, 21, 27, 37, 16, 238, 18, 0,
	17, 0, 0, 35, 0, 0, 39, 13, 20, 0,
	43, 29, 14, 15, 105, 44, 0, 19, 40, 41,
	42, 47, 46, 50, 48, 51, 52, 56, 53, 54,
	55, 239, 49, 25, 24, 45, 22, 38, 23, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 33, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 0, 0, 63, 64, 65,
	66, 0, 0, 0, 62, 85, 0, 86, 0, 60,
	30, 0, 59, 0, 32, 31, 0, 0, 0, 28,
	0, 12, 0, 0, 21, 27, 37, 16, 182, 18,
	0, 17, 0, 0, 35, 0, 0, 39, 13, 20,
	0, 43, 29, 14, 15, 105, 44, 0, 19, 40,
	41, 42, 47, 46, 50, 48, 51, 52, 56, 53,
	54, 55, 183, 49, 25, 24, 45, 22, 38, 23,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 34, 0, 0, 0, 0, 102, 0,
	0, 0, 36, 0, 47, 46, 50, 48, 51, 52,
	56, 53, 54, 55, 0, 49, 0, 0, 45, 0,
	0, 30, 0, 0, 0, 32, 31, 0, 0, 0,
	28, 0, 12, 0, 0, 21, 27, 37, 16, 305,
	18, 0, 17, 0, 0, 35, 0, 0, 39, 13,
	20, 0, 43, 29, 14, 15, 105, 44, 0, 19,
	40, 41, 42, 47, 46, 50, 48, 51, 52, 56,
	53, 54, 55, 306, 49, 25, 24, 45, 22, 38,
	23, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 33, 34, 0, 0, 0, 0, 102,
	0, 0, 0, 36, 0, 47, 46, 50, 48, 51,
	52, 56, 53, 54, 55, 0, 49, 0, 0, 45,
	0, 0, 30, 0, 0, 0, 32, 31, 0, 0,
	0, 28, 0, 12, 0, 0, 21, 27, 37, 16,
	268, 18, 0, 17, 0, 0, 35, 0, 0, 39,
	13, 20, 0, 43, 29, 14, 15, 105, 44, 0,
	19, 40, 41, 42, 47, 46, 50, 48, 51, 52,
	56, 53, 54, 55, 269, 49, 25, 24, 45, 22,
	38, 23, 120, 119, 123, 121, 124, 125, 129, 126,
	127, 128, 0, 122, 33, 34, 0, 0, 0, 0,
	102, 0, 0, 0, 36, 0, 47, 46, 50, 48,
	51, 52, 56, 53, 54, 55, 0, 49, 0, 0,
	45, 0, 0, 30, 0, 0, 0, 32, 31, 27,
	37, 16, 28, 18, 12, 17, 0, 21, 35, 0,
	0, 39, 13, 20, 0, 43, 29, 14, 15, 105,
	44, 0, 19, 40, 41, 42, 47, 46, 50, 48,
	51, 52, 56, 53, 54, 55, 0, 49, 25, 24,
	45, 22, 38, 23, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 33, 34, 0, 0,
	0, 0, 0, 102, 0, 0, 36, 0, 0, 47,
	46, 50, 48, 51, 52, 56, 53, 54, 55, 0,
	49, 0, 0, 45, 0, 30, 0, 0, 0, 32,
	31, 0, 0, 0, 28, 185, 12, 0, 0, 21,
	27, 37, 16, 0, 18, 0, 17, 0, 0, 35,
	0, 148, 39, 13, 20, 0, 43, 29, 14, 15,
	105, 44, 0, 19, 40, 41, 42, 47, 46, 50,
	48, 51, 52, 56, 53, 54, 55, 145, 49, 25,
	24, 45, 22, 38, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 34, 0,
	0, 0, 0, 102, 0, 0, 0, 36, 0, 47,
	46, 50, 48, 51, 52, 56, 53, 54, 55, 0,
	49, 0, 0, 45, 0, 0, 30, 0, 0, 0,
	32, 31, 27, 206, 16, 28, 18, 12, 17, 0,
	21, 35, 0, 0, 39, 13, 20, 0, 43, 29,
	14, 15, 105, 44, 0, 19, 40, 41, 42, 47,
	46, 50, 48, 51, 52, 56, 53, 54, 55, 0,
	49, 25, 24, 45, 22, 38, 23, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 33,
	34, 0, 0, 0, 0, 0, 102, 0, 0, 205,
	0, 0, 47, 46, 50, 48, 51, 52, 56, 53,
	54, 55, 0, 49, 0, 0, 45, 0, 30, 0,
	0, 0, 32, 31, 0, 0, 0, 28, 0, 12,
	0, 0, 21, 87, 88, 89, 90, 92, 83, 84,
	79, 0, 0, 0, 91, 93, 94, 95, 0, 96,
	61, 0, 81, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	112, 0, 0, 62, 85, 0, 86, 311, 60, 0,
	312, 59, 0, 0, 0, 87, 88, 89, 90, 92,
	83, 84, 79, 0, 0, 0, 91, 93, 94, 95,
	0, 96, 61, 0, 81, 80, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 0, 0, 0, 62, 85, 0, 86, 0,
	60, 0, 0, 59, 220, 0, 0, 87, 88, 89,
	90, 92, 83, 84, 79, 0, 0, 0, 91, 93,
	94, 95, 0, 96, 61, 0, 81, 80, 67, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 0, 0, 0, 62, 85, 0,
	86, 345, 60, 0, 0, 59, 0, 0, 0, 87,
	88, 89, 90, 92, 83, 84, 79, 0, 0, 0,
	91, 93, 94, 95, 0, 96, 61, 0, 81, 80,
	67, 69, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 0, 0, 0, 62,
	85, 0, 86, 342, 60, 0, 0, 59, 0, 0,
	0, 87, 88, 89, 90, 92, 83, 84, 79, 0,
	0, 0, 91, 93, 94, 95, 0, 96, 61, 0,
	81, 80, 67, 69, 68, 72, 74, 73, 75, 76,
	78, 77, 70, 71, 63, 64, 65, 66, 0, 0,
	0, 62, 85, 0, 86, 332, 60, 0, 0, 59,
	0, 0, 0, 87, 88, 89, 90, 92, 83, 84,
	79, 0, 0, 0, 91, 93, 94, 95, 0, 96,
	61, 0, 81, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	0, 0, 0, 62, 85, 0, 86, 324, 60, 0,
	0, 59, 0, 0, 0, 87, 88, 89, 90, 92,
	83, 84, 79, 0, 0, 0, 91, 93, 94, 95,
	0, 96, 61, 0, 81, 80, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 0, 0, 0, 62, 85, 0, 86, 303,
	60, 0, 0, 59, 0, 0, 0, 87, 88, 89,
	90, 92, 83, 84, 79, 0, 0, 0, 91, 93,
	94, 95, 0, 96, 61, 0, 81, 80, 67, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 0, 0, 0, 62, 85, 0,
	86, 301, 60, 0, 0, 59, 0, 0, 0, 87,
	88, 89, 90, 92, 83, 84, 79, 0, 0, 0,
	91, 93, 94, 95, 0, 96, 61, 0, 81, 80,
	67, 69, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 0, 0, 0, 62,
	85, 0, 86, 300, 60, 0, 0, 59, 0, 0,
	0, 87, 88, 89, 90, 92, 83, 84, 79, 0,
	0, 0, 91, 93, 94, 95, 0, 96, 61, 0,
	81, 80, 67, 69, 68, 72, 74, 73, 75, 76,
	78, 77, 70, 71, 63, 64, 65, 66, 0, 0,
	0, 62, 85, 0, 86, 267, 60, 0, 0, 59,
	0, 0, 0, 87, 88, 89, 90, 92, 83, 84,
	79, 0, 0, 0, 91, 93, 94, 95, 0, 96,
	61, 0, 81, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	0, 0, 0, 62, 85, 0, 86, 254, 60, 0,
	0, 59, 0, 0, 0, 87, 88, 89, 90, 92,
	83, 84, 79, 0, 0, 0, 91, 93, 94, 95,
	0, 96, 61, 0, 81, 80, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 0, 0, 0, 62, 85, 0, 86, 0,
	60, 0, 253, 59, 0, 0, 0, 87, 88, 89,
	90, 92, 83, 84, 79, 0, 0, 0, 91, 93,
	94, 95, 0, 96, 61, 0, 81, 80, 67, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 0, 0, 0, 62, 85, 0,
	86, 252, 60, 0, 0, 59, 0, 0, 0, 87,
	88, 89, 90, 92, 83, 84, 79, 0, 0, 0,
	91, 93, 94, 95, 0, 96, 61, 0, 81, 80,
	67, 69, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 0, 0, 0, 62,
	85, 0, 86, 240, 60, 0, 0, 59, 0, 0,
	0, 87, 88, 89, 90, 92, 83, 84, 79, 0,
	0, 0, 91, 93, 94, 95, 0, 96, 61, 0,
	81, 80, 67, 69, 68, 72, 74, 73, 75, 76,
	78, 77, 70, 71, 63, 64, 65, 66, 0, 0,
	0, 62, 85, 0, 86, 235, 60, 0, 0, 59,
	0, 0, 0, 87, 88, 89, 90, 92, 83, 84,
	79, 0, 0, 0, 91, 93, 94, 95, 0, 96,
	61, 0, 81, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	0, 0, 0, 62, 85, 0, 86, 232, 60, 0,
	0, 59, 0, 0, 0, 87, 88, 89, 90, 92,
	83, 84, 79, 0, 0, 0, 91, 93, 94, 95,
	0, 96, 61, 0, 81, 80, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 0, 0, 0, 62, 85, 0, 86, 228,
	60, 0, 0, 59, 0, 0, 0, 87, 88, 89,
	90, 92, 83, 84, 79, 0, 0, 0, 91, 93,
	94, 95, 0, 96, 61, 222, 81, 80, 67, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 0, 0, 0, 62, 85, 0,
	86, 0, 60, 0, 0, 59, 0, 0, 0, 87,
	88, 89, 90, 92, 83, 84, 79, 0, 0, 0,
	91, 93, 94, 95, 0, 96, 61, 0, 81, 80,
	67, 69, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 0, 0, 0, 62,
	85, 0, 86, 0, 60, 221, 0, 59, 0, 0,
	0, 87, 88, 89, 90, 92, 83, 84, 79, 0,
	0, 0, 91, 93, 94, 95, 0, 96, 61, 0,
	81, 80, 67, 69, 68, 72, 74, 73, 75, 76,
	78, 77, 70, 71, 63, 64, 65, 66, 0, 0,
	0, 62, 85, 0, 86, 203, 60, 0, 0, 59,
	0, 0, 0, 87, 88, 89, 90, 92, 83, 84,
	79, 0, 0, 0, 91, 93, 94, 95, 0, 96,
	61, 0, 81, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	0, 0, 0, 62, 85, 0, 86, 0, 60, 0,
	0, 59, 0, 0, 0, 87, 88, 89, 90, 92,
	83, 84, 79, 0, 0, 0, 91, 93, 94, 95,
	0, 96, 61, 0, 81, 80, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 0, 0, 0, 62, 248, 0, 86, 0,
	60, 0, 0, 59, 0, 0, 0, 87, 88, 89,
	90, 92, 83, 84, 79, 0, 0, 0, 91, 93,
	94, 95, 0, 96, 61, 0, 81, 80, 67, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 0, 0, 79, 62, 209, 0,
	210, 0, 60, 0, 0, 59, 0, 0, 0, 87,
	88, 89, 90, 92, 83, 84, 0, 0, 0, 0,
	91, 93, 94, 95, 0, 201, 61, 0, 81, 80,
	67, 69, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 83, 84, 79, 62,
	85, 0, 86, 0, 60, 0, 0, 59, 0, 0,
	81, 80, 67, 69, 68, 72, 74, 73, 75, 76,
	78, 77, 70, 71, 63, 64, 65, 66, 0, 0,
	79, 62, 85, 0, 86, 0, 60, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 80, 67, 69, 68, 72, 74, 73,
	75, 76, 78, 77, 70, 71, 63, 64, 65, 66,
	83, 84, 0, 62, 85, 0, 86, 0, 60, 0,
	0, 59, 0, 0, 79, 0, 67, 69, 68, 72,
	74, 73, 75, 76, 78, 77, 70, 71, 63, 64,
	65, 66, 83, 84, 0, 62, 85, 0, 86, 0,
	60, 0, 0, 59, 0, 0, 0, 0, 0, 69,
	68, 72, 74, 73, 75, 76, 78, 77, 70, 71,
	63, 64, 65, 66, 83, 84, 0, 62, 85, 0,
	86, 0, 60, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 68, 72, 74, 73, 75, 76, 78, 77,
	70, 71, 63, 64, 65, 66, 0, 0, 0, 62,
	85, 0, 86, 102, 60, 0, 0, 59, 0, 47,
	46, 50, 48, 51, 52, 56, 53, 54, 55, 102,
	49, 0, 0, 45, 0, 47, 46, 50, 48, 51,
	52, 56, 53, 54, 55, 0, 49, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99,
}

var pkPact = [...]int16{
	344, -1000, -1000, 344, -1000, 106, -1000, 2223, 102, -1000,
	-1000, 2634, 344, 1042, 2650, 100, 96, 93, 91, 1177,
	1084, 1042, -1000, 867, -1000, -1000, 89, -1000, 1042, 891,
	1042, 1042, 1042, 1042, 1042, 1042, -1000, -1000, -1000, 1042,
	88, 87, 86, 984, 2650, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1042,
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
	1042, 1042, 1042, -1000, -1000, 9, 647, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 941, -83, 2650,
	-1000, -1000, -1000, -22, 2223, 85, -1000, 2650, 1042, 445,
	1042, 84, 1042, -1000, 2650, -90, -1000, 2379, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	647, 2171, 1134, -1000, 227, 227, 227, -4, -4, 2223,
	79, 2327, 28, 1042, 1042, 1042, -46, -49, -1000, -15,
	1235, 2119, 2067, 171, 160, 160, 227, 227, 2527, 336,
	2559, 534, 534, 433, 433, 433, 433, 433, 433, 433,
	2223, 2495, 2463, 2223, -1000, 75, -1000, -1000, -1000, 1042,
	24, -84, -1000, 71, 2223, -1000, 2015, 2650, 23, -1000,
	-86, 1963, 105, 111, -1000, 1911, 546, 1859, 20, -1000,
	1042, 1042, 19, -1000, -9, 17, 16, 2275, 647, 9,
	647, -1000, 1807, 1755, 1703, 689, 344, 689, 344, 182,
	-1000, -1000, 1042, 647, 1651, -1000, 849, 1042, -1000, -1000,
	-1000, 1042, 344, 1042, 1042, 344, 15, -89, -1000, 70,
	2650, -1000, -1000, 2223, -1000, -1000, -1000, -1000, 9, 14,
	51, 13, -1000, 1042, -1000, 10, -94, -1000, -1000, -63,
	6, -64, -65, 182, 209, 2411, 4, -1000, -1000, 40,
	2223, 1599, 1547, -1000, 104, 2223, 1495, 200, -1000, 748,
	1042, 32, -11, -1000, 647, -1000, 1183, -16, 790, -1000,
	-17, -1000, -1000, -1000, -66, -1000, -1000, -1000, -1000, 1042,
	-1000, -1000, 445, 344, 344, -1000, 31, 1443, 546, -1000,
	3, -1000, 1042, 344, -1000, -1000, 344, 689, 344, 1391,
	-1, -1000, -1000, 1042, -1000, -2, -1000, 76, -78, -79,
	-8, -80, -1000, 344, 1339, -1000, 1042, -1000, -1000, -19,
	-1000, -1000, -1000, 1287, 344, -1000, -81, -1000,
}

var pkPgo = [...]uint8{
	0, 250, 0, 7, 2, 12, 3, 249, 248, 247,
	10, 20, 5, 246, 8, 245, 85, 215, 16, 1,
	4, 241, 9, 233, 217, 216,
}

var pkR1 = [...]int8{
	0, 1, 4, 4, 6, 6, 3, 3, 3, 5,
	5, 7, 7, 7, 7, 7, 7, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 14, 14,
	13, 13, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 8, 8, 15, 20, 20, 20, 20,
	21, 21, 11, 11, 11, 11, 11, 11, 12, 12,
	12, 12, 12, 12, 19, 19, 22, 23, 23, 23,
	18, 24, 24, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 25, 25, 25, 10,
	10, 10, 10,
}

var pkR2 = [...]int8{
	0, 1, 0, 2, 0, 1, 1, 1, 2, 1,
	1, 1, 3, 4, 1, 1, 2, 3, 2, 2,
	6, 5, 9, 7, 5, 7, 5, 8, 2, 4,
	3, 1, 1, 1, 1, 1, 1, 2, 4, 4,
	5, 3, 4, 4, 4, 6, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 6, 5, 5, 7, 4, 4, 3, 4, 6,
	10, 4, 4, 8, 5, 8, 5, 5, 0, 2,
	8, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 0, 1, 1, 3,
	1, 3, 0, 1, 1, 3, 4, 6, 0, 1,
	1, 3, 4, 6, 1, 3, 3, 0, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3,
}

var pkChk = [...]int16{
	-1000, -1, -4, -3, 102, -5, -7, -2, 23, 18,
	19, 28, 105, 21, 26, 27, 10, 14, 12, 31,
	22, 108, 50, 52, 48, 47, -16, 8, 103, 25,
	94, 99, 98, 65, 66, 17, 75, 9, 51, 20,
	32, 33, 34, 24, 29, 49, 36, 35, 38, 46,
	37, 39, 40, 42, 43, 44, 41, -4, 102, 108,
	105, 77, 100, 93, 94, 95, 96, 81, 83, 82,
	91, 92, 84, 86, 85, 87, 88, 90, 89, 15,
	80, 79, -9, 65, 66, 101, 103, 60, 61, 62,
	63, 71, 64, 72, 73, 74, 76, 103, -24, 103,
	-18, -16, 29, -4, -2, 28, -16, 103, 103, 103,
	103, -16, 103, -16, 103, -23, -22, -2, -17, 36,
	35, 38, 46, 37, 39, 40, 42, 43, 44, 41,
	103, -2, 103, -16, -2, -2, -2, -2, -2, -2,
	-16, -2, 103, 103, 103, 103, -16, -15, 77, -16,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -17, -10, 49, 21, 29, 103,
	-11, -19, 11, 45, -2, 104, -2, 107, -18, 106,
	-16, -2, -6, -16, -5, -2, 103, -2, -16, 109,
	107, 76, -11, 104, -16, 75, 9, -2, 103, 101,
	103, 104, -2, -2, -2, 103, 105, 103, 105, 105,
	109, 106, 78, 103, -2, 104, 107, 103, 104, -18,
	104, 107, 104, 102, 15, 104, -12, -19, 11, 45,
	104, 104, -22, -2, 104, 104, 104, 104, 101, -11,
	-10, -11, 104, 107, 104, -20, -21, 11, -16, -4,
	-20, -4, -14, -13, 30, -2, -11, 104, 11, 45,
	-2, -2, -2, -3, -8, -2, -2, -3, 104, 107,
	103, -16, -10, 104, 103, 104, -2, 104, 107, 106,
	104, 106, 106, -14, -25, 49, 21, 29, 104, 103,
	104, 104, 102, 104, 13, 11, 45, -2, 103, 104,
	-11, 104, 107, 105, 11, -16, 105, 103, 105, -2,
	-6, -3, -3, 103, 104, -12, 104, -2, -4, -4,
	-20, -4, 104, 104, -2, 104, 107, 106, 106, 104,
	106, -3, 104, -2, 105, 104, -4, 106,
}

var pkDef = [...]int16{
	2, -2, 1, 2, 6, 7, 9, 10, 11, 14,
	15, 0, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 31, 32, 33, 34, 35, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 78, 0,
	0, 0, 0, 0, 165, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 3, 8, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 72, 0, 132, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 0, 16, 0,
	151, 150, 165, 0, 18, 0, 19, 0, 0, 4,
	0, 0, 0, 28, 0, 0, 148, 0, 37, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	132, 0, 0, 46, 57, 58, 66, 73, 74, 75,
	35, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, -2, -2, -2, -2, -2, -2, -2,
	67, 68, 69, 70, 79, 80, 169, 170, 171, 0,
	0, 133, 134, 0, 144, 12, 0, 0, 0, 17,
	0, 0, 0, 35, 5, 0, 138, 0, 0, 30,
	0, 0, 0, 41, 35, 76, 77, 0, 132, 0,
	132, 87, 0, 0, 0, 126, 2, 126, 2, 98,
	38, 39, 0, 132, 0, 86, 0, 0, 13, 152,
	91, 0, 0, 123, 0, 0, 0, 139, 140, 0,
	0, 29, 149, 146, 85, 42, 43, 44, 0, 0,
	80, 0, 88, 0, 92, 0, 127, 128, 130, 0,
	0, 0, 0, 98, 0, 40, 0, 172, 135, 0,
	145, 0, 0, 21, 0, 124, 0, 24, 26, 0,
	0, 0, 80, 82, 132, 83, 0, 0, 0, 94,
	0, 96, 97, 99, 0, 166, 167, 168, 81, 0,
	136, 20, 4, 0, 0, 141, 0, 0, 138, 45,
	0, 89, 0, 2, 129, 131, 2, 126, 2, 0,
	0, 23, 25, 0, 142, 0, -2, 0, 0, 0,
	0, 0, 137, 0, 0, 27, 0, 93, 95, 0,
	101, 22, 143, 0, 2, 90, 0, 100,
}

var pkTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 75, 100, 83, 3,
	103, 104, 95, 93, 107, 94, 101, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 78, 102,
	3, 76, 3, 77, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 108, 3, 109, 82, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 105, 81, 106, 99,
}

var pkTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 97, 98,
}

var pkTok3 = [...]int8{
	0,
}

var pkErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	pkDebug        = 0
	pkErrorVerbose = false
)

type pkLexer interface {
	Lex(lval *pkSymType) int
	Error(s string)
}

type pkParser interface {
	Parse(pkLexer) int
	Lookahead() int
}

type pkParserImpl struct {
	lval  pkSymType
	stack [pkInitialStackSize]pkSymType
	char  int
}

func (p *pkParserImpl) Lookahead() int {
	return p.char
}

func pkNewParser() pkParser {
	return &pkParserImpl{}
}

const pkFlag = -1000

func pkTokname(c int) string {
	if c >= 1 && c-1 < len(pkToknames) {
		if pkToknames[c-1] != "" {
			return pkToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func pkStatname(s int) string {
	if s >= 0 && s < len(pkStatenames) {
		if pkStatenames[s] != "" {
			return pkStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func pkErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !pkErrorVerbose {
		return "syntax error"
	}

	for _, e := range pkErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + pkTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(pkPact[state])
	for tok := TOKSTART; tok-1 < len(pkToknames); tok++ {
		if n := base + tok; n >= 0 && n < pkLast && int(pkChk[int(pkAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if pkDef[state] == -2 {
		i := 0
		for pkExca[i] != -1 || int(pkExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; pkExca[i] >= 0; i += 2 {
			tok := int(pkExca[i])
			if tok < TOKSTART || pkExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if pkExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += pkTokname(tok)
	}
	return res
}

func pklex1(lex pkLexer, lval *pkSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(pkTok1[0])
		goto out
	}
	if char < len(pkTok1) {
		token = int(pkTok1[char])
		goto out
	}
	if char >= pkPrivate {
		if char < pkPrivate+len(pkTok2) {
			token = int(pkTok2[char-pkPrivate])
			goto out
		}
	}
	for i := 0; i < len(pkTok3); i += 2 {
		token = int(pkTok3[i+0])
		if token == char {
			token = int(pkTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(pkTok2[1]) /* unknown char */
	}
	if pkDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", pkTokname(token), uint(char))
	}
	return char, token
}

func pkParse(pklex pkLexer) int {
	return pkNewParser().Parse(pklex)
}

func (pkrcvr *pkParserImpl) Parse(pklex pkLexer) int {
	var pkn int
	var pkVAL pkSymType
	var pkDollar []pkSymType
	_ = pkDollar // silence set and not used
	pkS := pkrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	pkstate := 0
	pkrcvr.char = -1
	pktoken := -1 // pkrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		pkstate = -1
		pkrcvr.char = -1
		pktoken = -1
	}()
	pkp := -1
	goto pkstack

ret0:
	return 0

ret1:
	return 1

pkstack:
	/* put a state and value onto the stack */
	if pkDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", pkTokname(pktoken), pkStatname(pkstate))
	}

	pkp++
	if pkp >= len(pkS) {
		nyys := make([]pkSymType, len(pkS)*2)
		copy(nyys, pkS)
		pkS = nyys
	}
	pkS[pkp] = pkVAL
	pkS[pkp].yys = pkstate

pknewstate:
	pkn = int(pkPact[pkstate])
	if pkn <= pkFlag {
		goto pkdefault /* simple state */
	}
	if pkrcvr.char < 0 {
		pkrcvr.char, pktoken = pklex1(pklex, &pkrcvr.lval)
	}
	pkn += pktoken
	if pkn < 0 || pkn >= pkLast {
		goto pkdefault
	}
	pkn = int(pkAct[pkn])
	if int(pkChk[pkn]) == pktoken { /* valid shift */
		pkrcvr.char = -1
		pktoken = -1
		pkVAL = pkrcvr.lval
		pkstate = pkn
		if Errflag > 0 {
			Errflag--
		}
		goto pkstack
	}

pkdefault:
	/* default state action */
	pkn = int(pkDef[pkstate])
	if pkn == -2 {
		if pkrcvr.char < 0 {
			pkrcvr.char, pktoken = pklex1(pklex, &pkrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if pkExca[xi+0] == -1 && int(pkExca[xi+1]) == pkstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			pkn = int(pkExca[xi+0])
			if pkn < 0 || pkn == pktoken {
				break
			}
		}
		pkn = int(pkExca[xi+1])
		if pkn < 0 {
			goto ret0
		}
	}
	if pkn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			pklex.Error(pkErrorMessage(pkstate, pktoken))
			Nerrs++
			if pkDebug >= 1 {
				__yyfmt__.Printf("%s", pkStatname(pkstate))
				__yyfmt__.Printf(" saw %s\n", pkTokname(pktoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for pkp >= 0 {
				pkn = int(pkPact[pkS[pkp].yys]) + pkErrCode
				if pkn >= 0 && pkn < pkLast {
					pkstate = int(pkAct[pkn]) /* simulate a shift of "error" */
					if int(pkChk[pkstate]) == pkErrCode {
						goto pkstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if pkDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", pkS[pkp].yys)
				}
				pkp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if pkDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", pkTokname(pktoken))
			}
			if pktoken == pkEofCode {
				goto ret1
			}
			pkrcvr.char = -1
			pktoken = -1
			goto pknewstate /* try again in the same state */
		}
	}

	/* reduction by production pkn */
	if pkDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", pkn, pkStatname(pkstate))
	}

	pknt := pkn
	pkpt := pkp
	_ = pkpt // guard against "declared and not used"

	pkp -= int(pkR2[pkn])
	// pkp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if pkp+1 >= len(pkS) {
		nyys := make([]pkSymType, len(pkS)*2)
		copy(nyys, pkS)
		pkS = nyys
	}
	pkVAL = pkS[pkp+1]

	/* consult goto table to find next state */
	pkn = int(pkR1[pkn])
	pkg := int(pkPgo[pkn])
	pkj := pkg + pkS[pkp].yys + 1

	if pkj >= pkLast {
		pkstate = int(pkAct[pkg])
	} else {
		pkstate = int(pkAct[pkj])
		if int(pkChk[pkstate]) != -pkn {
			pkstate = int(pkAct[pkg])
		}
	}
	// dummy call; replaced with literal code
	switch pknt {

	case 1:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:63
		{
			HandleProgram(pklex, pkDollar[1].node)
		}
	case 2:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:67
		{
			pkVAL.node = makeNodeNil()
		}
	case 3:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:70
		{
			nn := &Node{stype: SEQUENCE,
				children: []*Node{pkDollar[1].node},
			}
			if pkDollar[2].node == nil {
				// do nothing
			} else if pkDollar[2].node.stype != SEQUENCE {
				nn.children = append(nn.children, pkDollar[2].node)
			} else {
				for i := 0; i < len(pkDollar[2].node.children); i++ {
					child := pkDollar[2].node.children[i]
					nn.children = append(nn.children, child)
				}
			}
			pkVAL.node = nn
		}
	case 4:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:87
		{
		}
	case 6:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:90
		{
			pkVAL.node = &Node{
				stype:    ';',
				children: []*Node{},
			}
		}
	case 11:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:107
		{
			pkVAL.node = &Node{
				stype:    RETURN,
				children: []*Node{},
			}
		}
	case 12:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:113
		{
			pkVAL.node = &Node{
				stype:    RETURN,
				children: []*Node{},
			}
		}
	case 13:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:119
		{
			pkVAL.node = &Node{
				stype:    RETURN,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 14:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:125
		{
			pkVAL.node = &Node{
				stype:    BREAK,
				children: []*Node{},
			}
		}
	case 15:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:131
		{
			pkVAL.node = &Node{
				stype:    CONTINUE,
				children: []*Node{},
			}
		}
	case 16:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:137
		{
			pkVAL.node = &Node{
				stype:    GLOBALDEC,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 17:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:144
		{
			pkVAL.node = pkDollar[2].node
		}
	case 18:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:146
		{
			pkVAL.node = &Node{
				stype:    SYM_DELETE,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 19:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:152
		{
			pkVAL.node = &Node{
				stype:    READONLY,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 20:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:158
		{
			pkVAL.node = &Node{
				stype:    ONCHANGE,
				children: []*Node{pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 21:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:164
		{
			pkVAL.node = &Node{
				stype:    WHILE,
				children: []*Node{pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 22:
		pkDollar = pkS[pkpt-9 : pkpt+1]
//line pk.y:171
		{
			pkVAL.node = &Node{
				stype:    FOR,
				children: []*Node{pkDollar[3].node, pkDollar[5].node, pkDollar[7].node, pkDollar[9].node},
			}
		}
	case 23:
		pkDollar = pkS[pkpt-7 : pkpt+1]
//line pk.y:178
		{
			pkVAL.node = &Node{
				stype:    FOR,
				children: []*Node{pkDollar[3].node, pkDollar[5].node, pkDollar[7].node},
			}
		}
	case 24:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:185
		{ /* else-less if */
			pkVAL.node = &Node{
				stype:    IF,
				children: []*Node{pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 25:
		pkDollar = pkS[pkpt-7 : pkpt+1]
//line pk.y:191
		{ /* if with else */
			pkVAL.node = &Node{
				stype:    IF,
				children: []*Node{pkDollar[3].node, pkDollar[5].node, pkDollar[7].node},
			}
		}
	case 26:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:197
		{
			pkVAL.node = &Node{
				stype:    KW_NEW,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 27:
		pkDollar = pkS[pkpt-8 : pkpt+1]
//line pk.y:204
		{
			pkVAL.node = &Node{
				stype:    KW_NEW,
				children: []*Node{pkDollar[3].node, pkDollar[5].node, pkDollar[7].node},
			}
		}
	case 28:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:210
		{
			pkVAL.node = &Node{
				stype:    UNDEFINE,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 29:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:216
		{
			pkVAL.node = &Node{
				stype:    UNDEFINE,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 30:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:222
		{
			pkVAL.node = &Node{
				stype:    '[',
				children: []*Node{pkDollar[2].node},
			}
		}
	case 37:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:234
		{
			pkVAL.node = &Node{
				stype:    DOUBLE,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 38:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:240
		{
			pkVAL.node = &Node{
				stype:    '[',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 39:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:246
		{
			pkVAL.node = &Node{
				stype:    SELECTION,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 40:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:252
		{
			pkVAL.node = &Node{
				stype:    '?',
				children: []*Node{pkDollar[1].node, pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 41:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:258
		{
			pkVAL.node = &Node{
				stype:    '(',
				children: []*Node{pkDollar[2].node},
			}
		}
	case 42:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:264
		{
			pkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 43:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:270
		{
			pkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 44:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:276
		{
			pkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 45:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:282
		{
			pkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 46:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:288
		{
			pkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 47:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:294
		{
			pkVAL.node = &Node{
				stype:    '%',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 48:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:300
		{
			pkVAL.node = &Node{
				stype:    '+',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 49:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:306
		{
			pkVAL.node = &Node{
				stype:    '-',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 50:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:312
		{
			pkVAL.node = &Node{
				stype:    '*',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 51:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:318
		{
			pkVAL.node = &Node{
				stype:    '/',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 52:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:324
		{
			pkVAL.node = &Node{
				stype:    '|',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 53:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:330
		{
			pkVAL.node = &Node{
				stype:    '&',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 54:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:336
		{
			pkVAL.node = &Node{
				stype:    '^',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 55:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:342
		{
			pkVAL.node = &Node{
				stype:    LSHIFT,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 56:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:348
		{
			pkVAL.node = &Node{
				stype:    RSHIFT,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 57:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:354
		{
			pkVAL.node = &Node{
				stype:    UNARYMINUS,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 58:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:360
		{
			pkVAL.node = &Node{
				stype:    '~',
				children: []*Node{pkDollar[2].node},
			}
		}
	case 59:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:366
		{
			pkVAL.node = &Node{
				stype:    GT,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 60:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:372
		{
			pkVAL.node = &Node{
				stype:    LT,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 61:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:378
		{
			pkVAL.node = &Node{
				stype:    GE,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 62:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:384
		{
			pkVAL.node = &Node{
				stype:    LE,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 63:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:390
		{
			pkVAL.node = &Node{
				stype:    EQ,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 64:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:396
		{
			pkVAL.node = &Node{
				stype:    REGEXEQ,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 65:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:402
		{
			pkVAL.node = &Node{
				stype:    NE,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 66:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:408
		{
			pkVAL.node = &Node{
				stype:    BANG,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 67:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:414
		{
			pkVAL.node = &Node{
				stype:    SYM_IN,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 68:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:420
		{
			pkVAL.node = &Node{
				stype:    AND,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 69:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:426
		{
			pkVAL.node = &Node{
				stype:    OR,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 70:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:432
		{
			pkVAL.node = &Node{
				stype:    EQUALS,
				children: []*Node{pkDollar[1].node, pkDollar[2].node, pkDollar[3].node},
			}
		}
	case 71:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:438
		{
			pkVAL.node = &Node{
				stype:    INC,
				children: []*Node{pkDollar[1].node, pkDollar[2].node},
			}
		}
	case 72:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:444
		{
			pkVAL.node = &Node{
				stype:    DEC,
				children: []*Node{pkDollar[1].node, pkDollar[2].node},
			}
		}
	case 73:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:450
		{
			pkVAL.node = &Node{
				stype:    PREINC,
				children: []*Node{pkDollar[1].node, pkDollar[2].node},
			}
		}
	case 74:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:456
		{
			pkVAL.node = &Node{
				stype:    PREDEC,
				children: []*Node{pkDollar[1].node, pkDollar[2].node},
			}
		}
	case 75:
		pkDollar = pkS[pkpt-2 : pkpt+1]
//line pk.y:462
		{
			pkVAL.node = &Node{
				stype:    EVAL,
				children: []*Node{pkDollar[2].node},
			}
		}
	case 76:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:468
		{
			pkVAL.node = &Node{
				stype:    '$',
				children: []*Node{},
			}
		}
	case 79:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:476
		{
			pkVAL.node = &Node{
				stype:    '.',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 80:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:482
		{
			pkVAL.node = &Node{
				stype:    '.',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 81:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:488
		{
			pkVAL.node = &Node{
				stype:    FUNCCALL,
				children: []*Node{pkDollar[1].node, pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 82:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:494
		{
			pkVAL.node = &Node{
				stype:    TASK,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 83:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:500
		{
			pkVAL.node = &Node{
				stype:    TASK,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 84:
		pkDollar = pkS[pkpt-7 : pkpt+1]
//line pk.y:506
		{
			pkVAL.node = &Node{
				stype:    TASK,
				children: []*Node{pkDollar[2].node, pkDollar[4].node, pkDollar[6].node},
			}
		}
	case 85:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:512
		{
			pkVAL.node = &Node{
				stype:    FUNCCALL,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 86:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:518
		{
			pkVAL.node = &Node{
				stype:    FUNCCALL,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 88:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:525
		{
			pkVAL.node = &Node{
				stype:    TYPEOF,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 89:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:531
		{
			pkVAL.node = &Node{
				stype:    XY,
				children: []*Node{pkDollar[3].node, pkDollar[5].node},
			}
		}
	case 90:
		pkDollar = pkS[pkpt-10 : pkpt+1]
//line pk.y:537
		{
			pkVAL.node = &Node{
				stype:    XY,
				children: []*Node{pkDollar[3].node, pkDollar[5].node, pkDollar[7].node, pkDollar[9].node},
			}
		}
	case 91:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:543
		{
			pkVAL.node = &Node{
				stype:    GLOBALDEC,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 92:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:549
		{
			pkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 93:
		pkDollar = pkS[pkpt-8 : pkpt+1]
//line pk.y:555
		{
			pkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{pkDollar[2].node, pkDollar[4].node, pkDollar[7].node},
			}
		}
	case 94:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:561
		{
			pkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 95:
		pkDollar = pkS[pkpt-8 : pkpt+1]
//line pk.y:567
		{
			pkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{pkDollar[2].node, pkDollar[4].node, pkDollar[7].node},
			}
		}
	case 96:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:573
		{
			pkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 97:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:579
		{
			pkVAL.node = &Node{
				stype:    CLASS,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 98:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:586
		{
			pkVAL.node = &Node{
				stype:    METHOD,
				children: []*Node{},
			}
		}
	case 100:
		pkDollar = pkS[pkpt-8 : pkpt+1]
//line pk.y:594
		{
			pkVAL.node = &Node{
				stype:    METHOD,
				children: []*Node{pkDollar[2].node, pkDollar[4].node, pkDollar[7].node},
			}
		}
	case 101:
		pkDollar = pkS[pkpt-5 : pkpt+1]
//line pk.y:600
		{
			pkVAL.node = &Node{
				stype:    METHOD,
				children: []*Node{pkDollar[2].node, pkDollar[4].node},
			}
		}
	case 113:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:619
		{
			pkVAL.node = &Node{stype: PLUSEQ}
		}
	case 114:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:620
		{
			pkVAL.node = &Node{stype: MINUSEQ}
		}
	case 115:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:621
		{
			pkVAL.node = &Node{stype: MULEQ}
		}
	case 116:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:622
		{
			pkVAL.node = &Node{stype: DIVEQ}
		}
	case 117:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:623
		{
			pkVAL.node = &Node{stype: OREQ}
		}
	case 118:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:624
		{
			pkVAL.node = &Node{stype: AMPEQ}
		}
	case 119:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:625
		{
			pkVAL.node = &Node{stype: XOREQ}
		}
	case 120:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:626
		{
			pkVAL.node = &Node{stype: RSHIFTEQ}
		}
	case 121:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:627
		{
			pkVAL.node = &Node{stype: LSHIFTEQ}
		}
	case 122:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:628
		{
			pkVAL.node = &Node{
				stype:    '=',
				children: []*Node{},
			}
		}
	case 123:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:635
		{
			pkVAL.node = nil
		}
	case 125:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:638
		{
			pkVAL.node = &Node{
				stype:    '?',
				children: []*Node{},
			}
		}
	case 126:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:645
		{
			pkVAL.node = nil
		}
	case 127:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:648
		{
			pkVAL.node = &Node{
				stype:    PRMLIST,
				children: []*Node{pkDollar[1].node, nil},
			}
		}
	case 128:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:654
		{
			pkVAL.node = &Node{
				stype:    PRMLIST,
				children: []*Node{pkDollar[1].node, nil},
			}
		}
	case 129:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:660
		{
			pkVAL.node = &Node{
				stype:    PRMLIST,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 130:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:667
		{
			pkVAL.node = &Node{
				stype:    PARAM,
				children: []*Node{pkDollar[1].node},
			}
		}
	case 131:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:673
		{
			pkVAL.node = &Node{
				stype:    PARAM,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 132:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:680
		{
			pkVAL.node = nil
		}
	case 134:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:682
		{
			pkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{},
			}
		}
	case 135:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:688
		{
			pkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{pkDollar[1].node},
			}
		}
	case 136:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:694
		{
			pkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 137:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:700
		{
			pkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{pkDollar[1].node, pkDollar[5].node},
			}
		}
	case 138:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:707
		{
			pkVAL.node = nil
		}
	case 140:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:709
		{
			pkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{},
			}
		}
	case 141:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:715
		{
			pkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{pkDollar[1].node},
			}
		}
	case 142:
		pkDollar = pkS[pkpt-4 : pkpt+1]
//line pk.y:721
		{
			pkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{pkDollar[3].node},
			}
		}
	case 143:
		pkDollar = pkS[pkpt-6 : pkpt+1]
//line pk.y:727
		{
			pkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{pkDollar[1].node, pkDollar[5].node},
			}
		}
	case 145:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:735
		{
			pkVAL.node = &Node{
				stype:    ',',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 146:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:742
		{
			pkVAL.node = &Node{
				stype:    ARRITEMEQ,
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 147:
		pkDollar = pkS[pkpt-0 : pkpt+1]
//line pk.y:749
		{
			pkVAL.node = nil
		}
	case 148:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:750
		{
			pkVAL.node = pkDollar[1].node
		}
	case 149:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:751
		{
			pkVAL.node = &Node{
				stype:    ',',
				children: []*Node{pkDollar[1].node, pkDollar[3].node},
			}
		}
	case 170:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:782
		{
			pkVAL.node = &Node{
				stype:    SYM_DELETE,
				children: []*Node{},
			}
		}
	case 171:
		pkDollar = pkS[pkpt-1 : pkpt+1]
//line pk.y:788
		{
			pkVAL.node = &Node{
				stype:    CLASS,
				children: []*Node{},
			}
		}
	case 172:
		pkDollar = pkS[pkpt-3 : pkpt+1]
//line pk.y:794
		{
			pkVAL.node = pkDollar[2].node
		}
	}
	goto pkstack /* stack new state and value */
}
