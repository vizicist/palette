==========================
Spout2 SDK update 14-02-15
==========================


SpoutGLDXinterop.cpp
		12.02.15	- Changed "OpenDirectX" to check for Intel graphics and open DirectX 9 if present
		13.02.15	- OpenDirectX9 uses SendMessageTimeout to get the fg window text instead of GetWindowText which can hang.
		14.02.15	- Used PathStripPath function requiring shlwapi.h - (see SpoutSDK.h)

SpoutDirectX.cpp
	14.02.15	- added UNREFERENCED_PARAMETER(pSharedTexture) to CheckAccess and AllowAccess


=================================
Notes on DirectX 11 and DirectX 9
=================================

Experience has shown problems for Intel graphics for DirectX 11. To resolve this problem,
if Intel graphics is detected as the render adapter, Spout will initialize for DirectX 9.

A system can have different adapters for display and rendering (e.g. Optimus graphics)

See : https://code.google.com/p/chromium/issues/detail?id=106438

It is the render adapter that is important for Spout compatibility.

DirectX 11 initialization is the default, but will be reset to DirectX 9 for an Intel render adapter.

This also over-rides SetDX9(false) and so it is necessary to use GetDX9() after sender or receiver intialization
to check the DirectX mode that has been initialized if that information is required.

If SetDX9(true) has been used, this auto-detection is not done and DirectX 9 initialization occurs normally.

For most situations this will have no influence on operation or performance. Both DirectX 11 and DirectX 9 
senders and receivers built with the Spout SDK will communicate because the DirextX 11 texture format used
(DXGI_FORMAT_B8G8R8A8_UNORM) is compatible with DirectX 9 texture sharing.

There is only a problem if the sender does not use this compatible format. The only applications at the moment are
Unity and VVVV. The compatible BGRA format is not easy to work with in Unity and the VVVV DirectX 11 textures
are only received by a DX11 receiver if the texture format is RGBA.

The only practical limitation is that these applications cannot be used in DirectX 11 mode with Intel graphics.
However, there is an alternative for DirectX 9 with VVVV and there may be a solution for Unity in the future.


There is a new SDK function to retrieve the adapter information :

bool spoutGLDXinterop::GetAdapterInfo(char *renderadapter,
                                      char *renderdescription, char *renderversion,
                                      char *displaydescription, char *displayversion,
                                      int maxsize, bool &bDX9)

This returns :

renderadapter        The render adapter description detected by DirectX functions
renderdescription    he render adapter description detected by Windows functions
renderversion        The render adapter version
displaydescription   The display adapter (attached to the desktop) detected by Windows functions
displayversion       The display adapter version
maxsize              Maximum size for all strings passed to the function i.e. the size of the smallest one.
bDX9                 Flag returned for DirectX 9 compatibility

This can be accessed from the Sender and Receiver classes e.g. sender.spout.interop.GetAdapterInfo(...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
