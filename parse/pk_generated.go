// Code generated by goyacc -p Pk -o pk_generated.go pk.y. DO NOT EDIT.

//line pk.y:1

package parse

import __yyfmt__ "fmt"

//line pk.y:4

//line pk.y:7
type PkSymType struct {
	yys  int
	node *Node
}

const VAR = 57346
const UNDEF = 57347
const MACRO = 57348
const QMARK2 = 57349
const DOLLAR2 = 57350
const WHILE = 57351
const DOTDOTDOT = 57352
const IF = 57353
const ELSE = 57354
const FOR = 57355
const SYM_IN = 57356
const BEINGREAD = 57357
const EVAL = 57358
const BREAK = 57359
const CONTINUE = 57360
const TASK = 57361
const SYM_DELETE = 57362
const UNDEFINE = 57363
const RETURN = 57364
const FUNC = 57365
const DEFINED = 57366
const NARGS = 57367
const TYPEOF = 57368
const XY = 57369
const DUR = 57370
const VOL = 57371
const TIME = 57372
const CHAN = 57373
const PITCH = 57374
const LENGTH = 57375
const NUMBER = 57376
const TYPE = 57377
const ATTRIB = 57378
const FLAGS = 57379
const VARG = 57380
const PORT = 57381
const PHRASE = 57382
const STRING = 57383
const NAME = 57384
const INTEGER = 57385
const OBJECT = 57386
const DOUBLE = 57387
const SEQUENCE = 57388
const SELECTION = 57389
const FUNCCALL = 57390
const PRMLIST = 57391
const PARAM = 57392
const ARRITEMEQ = 57393
const EQUALS = 57394
const PLUSEQ = 57395
const MINUSEQ = 57396
const MULEQ = 57397
const DIVEQ = 57398
const AMPEQ = 57399
const INC = 57400
const DEC = 57401
const PREINC = 57402
const PREDEC = 57403
const POSTINC = 57404
const POSTDEC = 57405
const OREQ = 57406
const XOREQ = 57407
const RSHIFTEQ = 57408
const LSHIFTEQ = 57409
const OR = 57410
const AND = 57411
const GT = 57412
const GE = 57413
const LT = 57414
const LE = 57415
const EQ = 57416
const NE = 57417
const REGEXEQ = 57418
const LSHIFT = 57419
const RSHIFT = 57420
const UNARYMINUS = 57421
const BANG = 57422

var PkToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"VAR",
	"UNDEF",
	"MACRO",
	"QMARK2",
	"DOLLAR2",
	"WHILE",
	"DOTDOTDOT",
	"IF",
	"ELSE",
	"FOR",
	"SYM_IN",
	"BEINGREAD",
	"EVAL",
	"BREAK",
	"CONTINUE",
	"TASK",
	"SYM_DELETE",
	"UNDEFINE",
	"RETURN",
	"FUNC",
	"DEFINED",
	"NARGS",
	"TYPEOF",
	"XY",
	"DUR",
	"VOL",
	"TIME",
	"CHAN",
	"PITCH",
	"LENGTH",
	"NUMBER",
	"TYPE",
	"ATTRIB",
	"FLAGS",
	"VARG",
	"PORT",
	"PHRASE",
	"STRING",
	"NAME",
	"INTEGER",
	"OBJECT",
	"DOUBLE",
	"SEQUENCE",
	"SELECTION",
	"FUNCCALL",
	"PRMLIST",
	"PARAM",
	"ARRITEMEQ",
	"EQUALS",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"AMPEQ",
	"INC",
	"DEC",
	"PREINC",
	"PREDEC",
	"POSTINC",
	"POSTDEC",
	"OREQ",
	"XOREQ",
	"RSHIFTEQ",
	"LSHIFTEQ",
	"'$'",
	"'='",
	"'?'",
	"':'",
	"OR",
	"AND",
	"'|'",
	"'^'",
	"'&'",
	"GT",
	"GE",
	"LT",
	"LE",
	"EQ",
	"NE",
	"REGEXEQ",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UNARYMINUS",
	"BANG",
	"'~'",
	"'%'",
	"'.'",
	"';'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
}

var PkStatenames = [...]string{}

const PkEofCode = 1
const PkErrCode = 2
const PkInitialStackSize = 16

//line pk.y:624

//line yacctab:1
var PkExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 145,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 50,
	-1, 146,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 51,
	-1, 147,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 52,
	-1, 148,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 53,
	-1, 149,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 54,
	-1, 150,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 55,
	-1, 151,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	81, 0,
	82, 0,
	83, 0,
	-2, 56,
}

const PkPrivate = 57344

const PkLast = 1927

var PkAct = [...]int16{
	6, 166, 2, 5, 3, 157, 51, 233, 212, 99,
	171, 172, 92, 91, 193, 72, 258, 100, 257, 236,
	234, 187, 164, 188, 114, 246, 117, 118, 119, 120,
	121, 122, 185, 244, 186, 124, 41, 40, 44, 42,
	45, 46, 50, 47, 48, 49, 255, 43, 235, 232,
	39, 230, 229, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 21, 131, 206,
	161, 72, 205, 204, 203, 200, 192, 181, 198, 237,
	194, 163, 179, 96, 165, 127, 169, 79, 168, 53,
	126, 52, 116, 125, 128, 113, 95, 94, 93, 90,
	239, 197, 123, 241, 161, 98, 129, 213, 101, 174,
	80, 81, 82, 83, 85, 76, 77, 182, 183, 184,
	158, 84, 86, 87, 88, 130, 89, 54, 75, 74,
	73, 60, 62, 61, 65, 67, 66, 68, 69, 71,
	70, 63, 64, 56, 57, 58, 59, 225, 1, 0,
	55, 78, 0, 79, 242, 53, 0, 52, 72, 243,
	113, 0, 167, 100, 202, 170, 0, 0, 0, 0,
	161, 161, 201, 0, 0, 207, 208, 0, 0, 216,
	0, 218, 219, 176, 222, 223, 217, 156, 226, 227,
	0, 224, 178, 0, 228, 0, 0, 0, 0, 0,
	0, 231, 76, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 40, 44, 42, 45, 46, 50, 47,
	48, 49, 0, 43, 0, 0, 39, 0, 247, 0,
	0, 248, 245, 168, 251, 249, 250, 252, 0, 253,
	79, 0, 53, 0, 52, 0, 0, 260, 0, 0,
	259, 72, 177, 215, 0, 215, 22, 32, 12, 0,
	14, 0, 13, 0, 0, 30, 8, 9, 34, 11,
	15, 7, 38, 24, 35, 36, 37, 41, 40, 44,
	42, 45, 46, 50, 47, 48, 49, 0, 43, 20,
	19, 39, 17, 33, 18, 76, 77, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 28, 29, 0,
	0, 0, 0, 72, 0, 0, 0, 31, 0, 0,
	0, 63, 64, 56, 57, 58, 59, 0, 0, 0,
	55, 78, 0, 79, 0, 53, 25, 52, 0, 0,
	27, 26, 0, 0, 4, 23, 0, 10, 0, 16,
	22, 32, 12, 0, 14, 0, 13, 76, 77, 30,
	8, 9, 34, 11, 15, 7, 38, 24, 35, 36,
	37, 41, 40, 44, 42, 45, 46, 50, 47, 48,
	49, 0, 43, 20, 19, 39, 17, 33, 18, 0,
	0, 0, 55, 78, 0, 79, 0, 53, 0, 52,
	0, 28, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 0, 0, 0, 41, 40, 44, 42, 45,
	46, 50, 47, 48, 49, 0, 43, 0, 0, 39,
	25, 0, 0, 0, 27, 26, 0, 0, 0, 23,
	0, 10, 0, 16, 22, 32, 12, 220, 14, 0,
	13, 0, 0, 30, 0, 0, 34, 11, 15, 0,
	38, 24, 35, 36, 37, 41, 40, 44, 42, 45,
	46, 50, 47, 48, 49, 221, 43, 20, 19, 39,
	17, 33, 18, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 0, 0, 0, 41,
	40, 44, 42, 45, 46, 50, 47, 48, 49, 0,
	43, 0, 0, 39, 25, 0, 0, 0, 27, 26,
	0, 0, 0, 23, 0, 10, 0, 16, 22, 32,
	12, 159, 14, 0, 13, 0, 0, 30, 0, 0,
	34, 11, 15, 0, 38, 24, 35, 36, 37, 41,
	40, 44, 42, 45, 46, 50, 47, 48, 49, 160,
	43, 20, 19, 39, 17, 33, 18, 97, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 28,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	41, 40, 44, 42, 45, 46, 50, 47, 48, 49,
	0, 43, 0, 0, 39, 0, 0, 0, 25, 72,
	0, 0, 27, 26, 22, 32, 12, 23, 14, 10,
	13, 16, 0, 30, 0, 0, 34, 11, 15, 0,
	38, 24, 35, 36, 37, 41, 40, 44, 42, 45,
	46, 50, 47, 48, 49, 0, 43, 20, 19, 39,
	17, 33, 18, 76, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 0, 0, 0, 0,
	0, 56, 57, 58, 59, 0, 0, 0, 55, 78,
	0, 79, 0, 53, 25, 52, 0, 0, 27, 26,
	0, 0, 0, 23, 162, 10, 0, 16, 22, 32,
	12, 0, 14, 0, 13, 0, 0, 30, 0, 0,
	34, 11, 15, 0, 38, 24, 35, 36, 37, 41,
	40, 44, 42, 45, 46, 50, 47, 48, 49, 0,
	43, 20, 19, 39, 17, 33, 18, 41, 40, 44,
	42, 45, 46, 50, 47, 48, 49, 0, 43, 28,
	29, 39, 0, 72, 0, 0, 0, 0, 0, 31,
	103, 102, 106, 104, 107, 108, 112, 109, 110, 111,
	0, 105, 0, 0, 0, 0, 0, 0, 25, 0,
	0, 0, 27, 26, 0, 0, 0, 23, 0, 10,
	0, 16, 80, 81, 82, 83, 85, 76, 77, 0,
	0, 0, 0, 84, 86, 87, 88, 72, 89, 54,
	0, 74, 73, 60, 62, 61, 65, 67, 66, 68,
	69, 71, 70, 63, 64, 56, 57, 58, 59, 0,
	0, 0, 55, 78, 0, 79, 0, 53, 0, 52,
	0, 256, 0, 0, 0, 0, 80, 81, 82, 83,
	85, 76, 77, 0, 0, 0, 0, 84, 86, 87,
	88, 72, 89, 54, 0, 74, 73, 60, 62, 61,
	65, 67, 66, 68, 69, 71, 70, 63, 64, 56,
	57, 58, 59, 0, 0, 0, 55, 78, 0, 79,
	0, 53, 0, 52, 0, 210, 0, 0, 0, 0,
	80, 81, 82, 83, 85, 76, 77, 0, 0, 0,
	72, 84, 86, 87, 88, 0, 89, 54, 0, 74,
	73, 60, 62, 61, 65, 67, 66, 68, 69, 71,
	70, 63, 64, 56, 57, 58, 59, 0, 0, 0,
	55, 78, 0, 79, 0, 53, 0, 52, 189, 80,
	81, 82, 83, 85, 76, 77, 0, 0, 72, 0,
	84, 86, 87, 88, 0, 89, 54, 0, 74, 73,
	60, 62, 61, 65, 67, 66, 68, 69, 71, 70,
	63, 64, 56, 57, 58, 59, 0, 0, 0, 55,
	78, 0, 79, 261, 53, 0, 52, 80, 81, 82,
	83, 85, 76, 77, 0, 0, 72, 0, 84, 86,
	87, 88, 0, 89, 54, 0, 74, 73, 60, 62,
	61, 65, 67, 66, 68, 69, 71, 70, 63, 64,
	56, 57, 58, 59, 0, 0, 0, 55, 78, 0,
	79, 254, 53, 0, 52, 80, 81, 82, 83, 85,
	76, 77, 0, 0, 72, 0, 84, 86, 87, 88,
	0, 89, 54, 0, 74, 73, 60, 62, 61, 65,
	67, 66, 68, 69, 71, 70, 63, 64, 56, 57,
	58, 59, 0, 0, 0, 55, 78, 0, 79, 240,
	53, 0, 52, 80, 81, 82, 83, 85, 76, 77,
	0, 0, 72, 0, 84, 86, 87, 88, 0, 89,
	54, 0, 74, 73, 60, 62, 61, 65, 67, 66,
	68, 69, 71, 70, 63, 64, 56, 57, 58, 59,
	0, 0, 0, 55, 78, 0, 79, 238, 53, 0,
	52, 80, 81, 82, 83, 85, 76, 77, 0, 0,
	72, 0, 84, 86, 87, 88, 0, 89, 54, 0,
	74, 73, 60, 62, 61, 65, 67, 66, 68, 69,
	71, 70, 63, 64, 56, 57, 58, 59, 0, 0,
	0, 55, 78, 0, 79, 211, 53, 0, 52, 80,
	81, 82, 83, 85, 76, 77, 0, 0, 72, 0,
	84, 86, 87, 88, 0, 89, 54, 0, 74, 73,
	60, 62, 61, 65, 67, 66, 68, 69, 71, 70,
	63, 64, 56, 57, 58, 59, 0, 0, 0, 55,
	78, 0, 79, 209, 53, 0, 52, 80, 81, 82,
	83, 85, 76, 77, 0, 0, 72, 0, 84, 86,
	87, 88, 0, 89, 54, 0, 74, 73, 60, 62,
	61, 65, 67, 66, 68, 69, 71, 70, 63, 64,
	56, 57, 58, 59, 0, 0, 0, 55, 78, 0,
	79, 199, 53, 0, 52, 80, 81, 82, 83, 85,
	76, 77, 0, 0, 72, 0, 84, 86, 87, 88,
	0, 89, 54, 0, 74, 73, 60, 62, 61, 65,
	67, 66, 68, 69, 71, 70, 63, 64, 56, 57,
	58, 59, 0, 0, 0, 55, 78, 0, 79, 196,
	53, 0, 52, 80, 81, 82, 83, 85, 76, 77,
	0, 0, 72, 0, 84, 86, 87, 88, 0, 89,
	54, 0, 74, 73, 60, 62, 61, 65, 67, 66,
	68, 69, 71, 70, 63, 64, 56, 57, 58, 59,
	0, 0, 0, 55, 78, 0, 79, 195, 53, 0,
	52, 80, 81, 82, 83, 85, 76, 77, 0, 0,
	72, 0, 84, 86, 87, 88, 0, 89, 54, 191,
	74, 73, 60, 62, 61, 65, 67, 66, 68, 69,
	71, 70, 63, 64, 56, 57, 58, 59, 0, 0,
	0, 55, 78, 0, 79, 0, 53, 0, 52, 80,
	81, 82, 83, 85, 76, 77, 0, 0, 72, 0,
	84, 86, 87, 88, 0, 89, 54, 0, 74, 73,
	60, 62, 61, 65, 67, 66, 68, 69, 71, 70,
	63, 64, 56, 57, 58, 59, 0, 0, 0, 55,
	78, 0, 79, 0, 53, 190, 52, 80, 81, 82,
	83, 85, 76, 77, 0, 0, 72, 0, 84, 86,
	87, 88, 0, 89, 54, 0, 74, 73, 60, 62,
	61, 65, 67, 66, 68, 69, 71, 70, 63, 64,
	56, 57, 58, 59, 0, 0, 0, 55, 78, 0,
	79, 175, 53, 0, 52, 80, 81, 82, 83, 85,
	76, 77, 0, 0, 72, 0, 84, 86, 87, 88,
	0, 89, 54, 0, 74, 73, 60, 62, 61, 65,
	67, 66, 68, 69, 71, 70, 63, 64, 56, 57,
	58, 59, 0, 0, 0, 55, 78, 0, 79, 0,
	53, 0, 52, 80, 81, 82, 83, 85, 76, 77,
	0, 0, 72, 0, 84, 86, 87, 88, 0, 89,
	54, 0, 74, 73, 60, 62, 61, 65, 67, 66,
	68, 69, 71, 70, 63, 64, 56, 57, 58, 59,
	0, 0, 0, 55, 78, 72, 180, 0, 53, 0,
	52, 80, 81, 82, 83, 85, 76, 77, 0, 0,
	0, 0, 84, 86, 87, 88, 0, 173, 54, 0,
	74, 73, 60, 62, 61, 65, 67, 66, 68, 69,
	71, 70, 63, 64, 56, 57, 58, 59, 72, 76,
	77, 55, 78, 0, 79, 0, 53, 0, 52, 0,
	0, 0, 0, 74, 73, 60, 62, 61, 65, 67,
	66, 68, 69, 71, 70, 63, 64, 56, 57, 58,
	59, 72, 0, 0, 55, 78, 0, 79, 0, 53,
	0, 52, 76, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 60, 62,
	61, 65, 67, 66, 68, 69, 71, 70, 63, 64,
	56, 57, 58, 59, 72, 76, 77, 55, 78, 0,
	79, 0, 53, 0, 52, 0, 0, 0, 0, 0,
	0, 60, 62, 61, 65, 67, 66, 68, 69, 71,
	70, 63, 64, 56, 57, 58, 59, 72, 0, 0,
	55, 78, 0, 79, 0, 53, 0, 52, 76, 77,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 61, 65, 67, 66,
	68, 69, 71, 70, 63, 64, 56, 57, 58, 59,
	72, 76, 77, 55, 78, 0, 79, 0, 53, 0,
	52, 0, 0, 0, 0, 0, 76, 77, 0, 61,
	65, 67, 66, 68, 69, 71, 70, 63, 64, 56,
	57, 58, 59, 0, 0, 0, 55, 78, 0, 79,
	0, 53, 0, 52, 76, 77, 58, 59, 0, 0,
	0, 55, 78, 0, 79, 0, 53, 0, 52, 0,
	0, 0, 0, 65, 67, 66, 68, 69, 71, 70,
	63, 64, 56, 57, 58, 59, 0, 0, 0, 55,
	78, 0, 79, 0, 53, 0, 52,
}

var PkPact = [...]int16{
	259, -1000, -1000, 259, -1000, -1000, 1502, 13, -1000, -1000,
	259, 721, 12, 11, 10, 491, 721, -1000, 762, -1000,
	-1000, 9, -1000, 721, 397, 721, 721, 721, 721, 721,
	721, -1000, -1000, -1000, 721, 7, 4, -1, 8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 721, 721, 721, 721, 721, 721, 721, 721,
	721, 721, 721, 721, 721, 721, 721, 721, 721, 721,
	721, 721, 721, 721, 721, 721, -1000, -1000, 762, 541,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	627, -77, 1502, 721, 353, 721, -1000, 739, -91, -1000,
	1598, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 541, 1454, 194, -1000, 309, 309, 309,
	1, 1, 1502, -4, 1550, -10, 721, 721, 721, -64,
	-75, -1000, 877, 1406, 1358, 154, 1798, 1798, 309, 309,
	1750, 1826, 1783, 615, 615, 247, 247, 247, 247, 247,
	247, 247, 1502, 1707, 1674, 1502, -1000, -11, -88, -1000,
	-6, 1502, -1000, 1310, -1000, 1262, 16, 74, -1000, 1214,
	-12, -1000, 721, 721, -13, -1000, -14, -15, -18, 541,
	541, -1000, 1166, 823, 1118, 582, 259, 582, 259, -1000,
	-1000, 721, -1000, 447, 721, -1000, 259, 721, 721, 259,
	-1000, -1000, 1502, -1000, -1000, -1000, -1000, -45, -46, -1000,
	721, -1000, -48, -95, -1000, -1000, -79, -49, -80, 1631,
	-1000, -7, 1502, 1070, -1000, 15, 1502, 1022, 101, -1000,
	-1000, 67, -65, 582, -1000, -73, -1000, 721, -1000, 353,
	259, 259, -1000, 721, 259, -1000, 259, 974, -51, -1000,
	-1000, 769, -81, -83, -1000, 259, 721, -1000, -1000, -1000,
	926, -1000,
}

var PkPgo = [...]uint8{
	0, 158, 0, 4, 2, 3, 1, 157, 138, 5,
	135, 77, 118, 130, 8, 117, 9, 115,
}

var PkR1 = [...]int8{
	0, 1, 4, 4, 6, 6, 3, 3, 5, 5,
	5, 5, 5, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 7, 7, 10, 14, 14,
	14, 14, 15, 9, 9, 9, 9, 9, 9, 13,
	13, 16, 17, 17, 17, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11,
}

var PkR2 = [...]int8{
	0, 1, 0, 2, 0, 1, 1, 1, 1, 3,
	4, 1, 1, 3, 2, 5, 9, 7, 5, 7,
	2, 4, 3, 1, 1, 1, 1, 1, 1, 2,
	4, 4, 5, 3, 4, 4, 4, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	3, 5, 5, 4, 4, 3, 4, 6, 10, 4,
	8, 5, 8, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
	1, 3, 1, 0, 1, 1, 3, 4, 6, 1,
	3, 3, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var PkChk = [...]int16{
	-1000, -1, -4, -3, 95, -5, -2, 22, 17, 18,
	98, 20, 9, 13, 11, 21, 100, 43, 45, 41,
	40, -11, 7, 96, 24, 87, 92, 91, 58, 59,
	16, 68, 8, 44, 19, 25, 26, 27, 23, 42,
	29, 28, 31, 39, 30, 32, 33, 35, 36, 37,
	34, -4, 100, 98, 70, 93, 86, 87, 88, 89,
	74, 76, 75, 84, 85, 77, 79, 78, 80, 81,
	83, 82, 14, 73, 72, -8, 58, 59, 94, 96,
	53, 54, 55, 56, 64, 57, 65, 66, 67, 69,
	96, -4, -2, 96, 96, 96, -11, 96, -17, -16,
	-2, -12, 29, 28, 31, 39, 30, 32, 33, 35,
	36, 37, 34, 96, -2, 96, -11, -2, -2, -2,
	-2, -2, -2, -11, -2, 96, 96, 96, 96, -11,
	-10, 70, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -12, -9, -13, 10,
	38, -2, 97, -2, 99, -2, -6, -11, -5, -2,
	-11, 101, 102, 69, -9, 97, -11, 68, 8, 96,
	96, 97, -2, -2, -2, 96, 98, 96, 98, 101,
	99, 71, 97, 102, 96, 97, 97, 95, 14, 97,
	97, -16, -2, 97, 97, 97, 97, -9, -9, 97,
	102, 97, -14, -15, 10, -11, -4, -14, -4, -2,
	10, 38, -2, -2, -3, -7, -2, -2, -3, 97,
	97, -2, 97, 102, 99, 97, 99, 96, 97, 95,
	97, 12, 97, 102, 98, -14, 98, -2, -6, -3,
	-3, -2, -4, -4, 97, 97, 102, 99, 99, -3,
	-2, 97,
}

var PkDef = [...]int16{
	2, -2, 1, 2, 6, 7, 8, 0, 11, 12,
	2, 0, 0, 0, 0, 0, 122, 23, 24, 25,
	26, 27, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 68, 69, 0, 0, 0, 0, 0, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 3, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 63, 0, 113,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	0, 0, 14, 0, 4, 0, 20, 0, 0, 123,
	0, 29, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 113, 0, 0, 37, 48, 49, 57,
	64, 65, 66, 27, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, -2, -2, -2, -2, -2,
	-2, -2, 58, 59, 60, 61, 70, 0, 114, 115,
	0, 119, 9, 0, 13, 0, 0, 27, 5, 0,
	0, 22, 0, 0, 0, 33, 0, 0, 0, 113,
	113, 75, 0, 0, 0, 108, 2, 108, 2, 30,
	31, 0, 74, 0, 0, 10, 0, 105, 0, 0,
	21, 124, 121, 73, 34, 35, 36, 0, 0, 76,
	0, 79, 0, 109, 110, 112, 0, 0, 0, 32,
	116, 0, 120, 0, 15, 0, 106, 0, 18, 71,
	72, 0, 0, 108, 81, 0, 83, 0, 117, 4,
	0, 0, 77, 0, 2, 111, 2, 0, 0, 17,
	19, 0, 0, 0, 118, 0, 0, 80, 82, 16,
	0, 78,
}

var PkTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 68, 93, 76, 3,
	96, 97, 88, 86, 102, 87, 94, 89, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 71, 95,
	3, 69, 3, 70, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 100, 3, 101, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 74, 99, 92,
}

var PkTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 72, 73, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 90, 91,
}

var PkTok3 = [...]int8{
	0,
}

var PkErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	PkDebug        = 0
	PkErrorVerbose = false
)

type PkLexer interface {
	Lex(lval *PkSymType) int
	Error(s string)
}

type PkParser interface {
	Parse(PkLexer) int
	Lookahead() int
}

type PkParserImpl struct {
	lval  PkSymType
	stack [PkInitialStackSize]PkSymType
	char  int
}

func (p *PkParserImpl) Lookahead() int {
	return p.char
}

func PkNewParser() PkParser {
	return &PkParserImpl{}
}

const PkFlag = -1000

func PkTokname(c int) string {
	if c >= 1 && c-1 < len(PkToknames) {
		if PkToknames[c-1] != "" {
			return PkToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func PkStatname(s int) string {
	if s >= 0 && s < len(PkStatenames) {
		if PkStatenames[s] != "" {
			return PkStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func PkErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !PkErrorVerbose {
		return "syntax error"
	}

	for _, e := range PkErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + PkTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(PkPact[state])
	for tok := TOKSTART; tok-1 < len(PkToknames); tok++ {
		if n := base + tok; n >= 0 && n < PkLast && int(PkChk[int(PkAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if PkDef[state] == -2 {
		i := 0
		for PkExca[i] != -1 || int(PkExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; PkExca[i] >= 0; i += 2 {
			tok := int(PkExca[i])
			if tok < TOKSTART || PkExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if PkExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += PkTokname(tok)
	}
	return res
}

func Pklex1(lex PkLexer, lval *PkSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(PkTok1[0])
		goto out
	}
	if char < len(PkTok1) {
		token = int(PkTok1[char])
		goto out
	}
	if char >= PkPrivate {
		if char < PkPrivate+len(PkTok2) {
			token = int(PkTok2[char-PkPrivate])
			goto out
		}
	}
	for i := 0; i < len(PkTok3); i += 2 {
		token = int(PkTok3[i+0])
		if token == char {
			token = int(PkTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(PkTok2[1]) /* unknown char */
	}
	if PkDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", PkTokname(token), uint(char))
	}
	return char, token
}

func PkParse(Pklex PkLexer) int {
	return PkNewParser().Parse(Pklex)
}

func (Pkrcvr *PkParserImpl) Parse(Pklex PkLexer) int {
	var Pkn int
	var PkVAL PkSymType
	var PkDollar []PkSymType
	_ = PkDollar // silence set and not used
	PkS := Pkrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Pkstate := 0
	Pkrcvr.char = -1
	Pktoken := -1 // Pkrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Pkstate = -1
		Pkrcvr.char = -1
		Pktoken = -1
	}()
	Pkp := -1
	goto Pkstack

ret0:
	return 0

ret1:
	return 1

Pkstack:
	/* put a state and value onto the stack */
	if PkDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", PkTokname(Pktoken), PkStatname(Pkstate))
	}

	Pkp++
	if Pkp >= len(PkS) {
		nyys := make([]PkSymType, len(PkS)*2)
		copy(nyys, PkS)
		PkS = nyys
	}
	PkS[Pkp] = PkVAL
	PkS[Pkp].yys = Pkstate

Pknewstate:
	Pkn = int(PkPact[Pkstate])
	if Pkn <= PkFlag {
		goto Pkdefault /* simple state */
	}
	if Pkrcvr.char < 0 {
		Pkrcvr.char, Pktoken = Pklex1(Pklex, &Pkrcvr.lval)
	}
	Pkn += Pktoken
	if Pkn < 0 || Pkn >= PkLast {
		goto Pkdefault
	}
	Pkn = int(PkAct[Pkn])
	if int(PkChk[Pkn]) == Pktoken { /* valid shift */
		Pkrcvr.char = -1
		Pktoken = -1
		PkVAL = Pkrcvr.lval
		Pkstate = Pkn
		if Errflag > 0 {
			Errflag--
		}
		goto Pkstack
	}

Pkdefault:
	/* default state action */
	Pkn = int(PkDef[Pkstate])
	if Pkn == -2 {
		if Pkrcvr.char < 0 {
			Pkrcvr.char, Pktoken = Pklex1(Pklex, &Pkrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if PkExca[xi+0] == -1 && int(PkExca[xi+1]) == Pkstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Pkn = int(PkExca[xi+0])
			if Pkn < 0 || Pkn == Pktoken {
				break
			}
		}
		Pkn = int(PkExca[xi+1])
		if Pkn < 0 {
			goto ret0
		}
	}
	if Pkn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Pklex.Error(PkErrorMessage(Pkstate, Pktoken))
			Nerrs++
			if PkDebug >= 1 {
				__yyfmt__.Printf("%s", PkStatname(Pkstate))
				__yyfmt__.Printf(" saw %s\n", PkTokname(Pktoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Pkp >= 0 {
				Pkn = int(PkPact[PkS[Pkp].yys]) + PkErrCode
				if Pkn >= 0 && Pkn < PkLast {
					Pkstate = int(PkAct[Pkn]) /* simulate a shift of "error" */
					if int(PkChk[Pkstate]) == PkErrCode {
						goto Pkstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if PkDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", PkS[Pkp].yys)
				}
				Pkp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if PkDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", PkTokname(Pktoken))
			}
			if Pktoken == PkEofCode {
				goto ret1
			}
			Pkrcvr.char = -1
			Pktoken = -1
			goto Pknewstate /* try again in the same state */
		}
	}

	/* reduction by production Pkn */
	if PkDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Pkn, PkStatname(Pkstate))
	}

	Pknt := Pkn
	Pkpt := Pkp
	_ = Pkpt // guard against "declared and not used"

	Pkp -= int(PkR2[Pkn])
	// Pkp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Pkp+1 >= len(PkS) {
		nyys := make([]PkSymType, len(PkS)*2)
		copy(nyys, PkS)
		PkS = nyys
	}
	PkVAL = PkS[Pkp+1]

	/* consult goto table to find next state */
	Pkn = int(PkR1[Pkn])
	Pkg := int(PkPgo[Pkn])
	Pkj := Pkg + PkS[Pkp].yys + 1

	if Pkj >= PkLast {
		Pkstate = int(PkAct[Pkg])
	} else {
		Pkstate = int(PkAct[Pkj])
		if int(PkChk[Pkstate]) != -Pkn {
			Pkstate = int(PkAct[Pkg])
		}
	}
	// dummy call; replaced with literal code
	switch Pknt {

	case 1:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:51
		{
			HandleProgram(Pklex, PkDollar[1].node)
		}
	case 2:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:55
		{
			PkVAL.node = makeNodeNil()
		}
	case 3:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:58
		{
			nn := &Node{stype: SEQUENCE,
				children: []*Node{PkDollar[1].node},
			}
			if PkDollar[2].node == nil {
				// do nothing
			} else if PkDollar[2].node.stype != SEQUENCE {
				nn.children = append(nn.children, PkDollar[2].node)
			} else {
				for i := 0; i < len(PkDollar[2].node.children); i++ {
					child := PkDollar[2].node.children[i]
					nn.children = append(nn.children, child)
				}
			}
			PkVAL.node = nn
		}
	case 4:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:75
		{
		}
	case 6:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:78
		{
			PkVAL.node = &Node{
				stype:    ';',
				children: []*Node{},
			}
		}
	case 9:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:87
		{
			PkVAL.node = &Node{
				stype:    RETURN,
				children: []*Node{},
			}
		}
	case 10:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:93
		{
			PkVAL.node = &Node{
				stype:    RETURN,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 11:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:99
		{
			PkVAL.node = &Node{
				stype:    BREAK,
				children: []*Node{},
			}
		}
	case 12:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:105
		{
			PkVAL.node = &Node{
				stype:    CONTINUE,
				children: []*Node{},
			}
		}
	case 13:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:112
		{
			PkVAL.node = PkDollar[2].node
		}
	case 14:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:114
		{
			PkVAL.node = &Node{
				stype:    SYM_DELETE,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 15:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:120
		{
			PkVAL.node = &Node{
				stype:    WHILE,
				children: []*Node{PkDollar[3].node, PkDollar[5].node},
			}
		}
	case 16:
		PkDollar = PkS[Pkpt-9 : Pkpt+1]
//line pk.y:127
		{
			PkVAL.node = &Node{
				stype:    FOR,
				children: []*Node{PkDollar[3].node, PkDollar[5].node, PkDollar[7].node, PkDollar[9].node},
			}
		}
	case 17:
		PkDollar = PkS[Pkpt-7 : Pkpt+1]
//line pk.y:134
		{
			PkVAL.node = &Node{
				stype:    FOR,
				children: []*Node{PkDollar[3].node, PkDollar[5].node, PkDollar[7].node},
			}
		}
	case 18:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:141
		{ /* else-less if */
			PkVAL.node = &Node{
				stype:    IF,
				children: []*Node{PkDollar[3].node, PkDollar[5].node},
			}
		}
	case 19:
		PkDollar = PkS[Pkpt-7 : Pkpt+1]
//line pk.y:147
		{ /* if with else */
			PkVAL.node = &Node{
				stype:    IF,
				children: []*Node{PkDollar[3].node, PkDollar[5].node, PkDollar[7].node},
			}
		}
	case 20:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:153
		{
			PkVAL.node = &Node{
				stype:    UNDEFINE,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 21:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:159
		{
			PkVAL.node = &Node{
				stype:    UNDEFINE,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 22:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:165
		{
			PkVAL.node = &Node{
				stype:    '[',
				children: []*Node{PkDollar[2].node},
			}
		}
	case 29:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:177
		{
			PkVAL.node = &Node{
				stype:    DOUBLE,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 30:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:183
		{
			PkVAL.node = &Node{
				stype:    '[',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 31:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:189
		{
			PkVAL.node = &Node{
				stype:    SELECTION,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 32:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:195
		{
			PkVAL.node = &Node{
				stype:    '?',
				children: []*Node{PkDollar[1].node, PkDollar[3].node, PkDollar[5].node},
			}
		}
	case 33:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:201
		{
			PkVAL.node = &Node{
				stype:    '(',
				children: []*Node{PkDollar[2].node},
			}
		}
	case 34:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:207
		{
			PkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 35:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:213
		{
			PkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 36:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:219
		{
			PkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 37:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:225
		{
			PkVAL.node = &Node{
				stype:    DEFINED,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 38:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:231
		{
			PkVAL.node = &Node{
				stype:    '%',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 39:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:237
		{
			PkVAL.node = &Node{
				stype:    '+',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 40:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:243
		{
			PkVAL.node = &Node{
				stype:    '-',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 41:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:249
		{
			PkVAL.node = &Node{
				stype:    '*',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 42:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:255
		{
			PkVAL.node = &Node{
				stype:    '/',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 43:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:261
		{
			PkVAL.node = &Node{
				stype:    '|',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 44:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:267
		{
			PkVAL.node = &Node{
				stype:    '&',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 45:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:273
		{
			PkVAL.node = &Node{
				stype:    '^',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 46:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:279
		{
			PkVAL.node = &Node{
				stype:    LSHIFT,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 47:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:285
		{
			PkVAL.node = &Node{
				stype:    RSHIFT,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 48:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:291
		{
			PkVAL.node = &Node{
				stype:    UNARYMINUS,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 49:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:297
		{
			PkVAL.node = &Node{
				stype:    '~',
				children: []*Node{PkDollar[2].node},
			}
		}
	case 50:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:303
		{
			PkVAL.node = &Node{
				stype:    GT,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 51:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:309
		{
			PkVAL.node = &Node{
				stype:    LT,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 52:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:315
		{
			PkVAL.node = &Node{
				stype:    GE,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 53:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:321
		{
			PkVAL.node = &Node{
				stype:    LE,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 54:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:327
		{
			PkVAL.node = &Node{
				stype:    EQ,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 55:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:333
		{
			PkVAL.node = &Node{
				stype:    REGEXEQ,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 56:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:339
		{
			PkVAL.node = &Node{
				stype:    NE,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 57:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:345
		{
			PkVAL.node = &Node{
				stype:    BANG,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 58:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:351
		{
			PkVAL.node = &Node{
				stype:    SYM_IN,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 59:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:357
		{
			PkVAL.node = &Node{
				stype:    AND,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 60:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:363
		{
			PkVAL.node = &Node{
				stype:    OR,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 61:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:369
		{
			PkVAL.node = &Node{
				stype:    EQUALS,
				children: []*Node{PkDollar[1].node, PkDollar[2].node, PkDollar[3].node},
			}
		}
	case 62:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:375
		{
			PkVAL.node = &Node{
				stype:    INC,
				children: []*Node{PkDollar[1].node, PkDollar[2].node},
			}
		}
	case 63:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:381
		{
			PkVAL.node = &Node{
				stype:    DEC,
				children: []*Node{PkDollar[1].node, PkDollar[2].node},
			}
		}
	case 64:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:387
		{
			PkVAL.node = &Node{
				stype:    PREINC,
				children: []*Node{PkDollar[1].node, PkDollar[2].node},
			}
		}
	case 65:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:393
		{
			PkVAL.node = &Node{
				stype:    PREDEC,
				children: []*Node{PkDollar[1].node, PkDollar[2].node},
			}
		}
	case 66:
		PkDollar = PkS[Pkpt-2 : Pkpt+1]
//line pk.y:399
		{
			PkVAL.node = &Node{
				stype:    EVAL,
				children: []*Node{PkDollar[2].node},
			}
		}
	case 67:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:405
		{
			PkVAL.node = &Node{
				stype:    '$',
				children: []*Node{},
			}
		}
	case 70:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:413
		{
			PkVAL.node = &Node{
				stype:    '.',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 71:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:419
		{
			PkVAL.node = &Node{
				stype:    TASK,
				children: []*Node{PkDollar[2].node, PkDollar[4].node},
			}
		}
	case 72:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:425
		{
			PkVAL.node = &Node{
				stype:    TASK,
				children: []*Node{PkDollar[2].node, PkDollar[4].node},
			}
		}
	case 73:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:431
		{
			PkVAL.node = &Node{
				stype:    FUNCCALL,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 74:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:437
		{
			PkVAL.node = &Node{
				stype:    FUNCCALL,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 76:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:444
		{
			PkVAL.node = &Node{
				stype:    TYPEOF,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 77:
		PkDollar = PkS[Pkpt-6 : Pkpt+1]
//line pk.y:450
		{
			PkVAL.node = &Node{
				stype:    XY,
				children: []*Node{PkDollar[3].node, PkDollar[5].node},
			}
		}
	case 78:
		PkDollar = PkS[Pkpt-10 : Pkpt+1]
//line pk.y:456
		{
			PkVAL.node = &Node{
				stype:    XY,
				children: []*Node{PkDollar[3].node, PkDollar[5].node, PkDollar[7].node, PkDollar[9].node},
			}
		}
	case 79:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:462
		{
			PkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 80:
		PkDollar = PkS[Pkpt-8 : Pkpt+1]
//line pk.y:468
		{
			PkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{PkDollar[2].node, PkDollar[4].node, PkDollar[7].node},
			}
		}
	case 81:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:474
		{
			PkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{PkDollar[2].node, PkDollar[4].node},
			}
		}
	case 82:
		PkDollar = PkS[Pkpt-8 : Pkpt+1]
//line pk.y:480
		{
			PkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{PkDollar[2].node, PkDollar[4].node, PkDollar[7].node},
			}
		}
	case 83:
		PkDollar = PkS[Pkpt-5 : Pkpt+1]
//line pk.y:486
		{
			PkVAL.node = &Node{
				stype:    FUNC,
				children: []*Node{PkDollar[2].node, PkDollar[4].node},
			}
		}
	case 95:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:505
		{
			PkVAL.node = &Node{stype: PLUSEQ}
		}
	case 96:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:506
		{
			PkVAL.node = &Node{stype: MINUSEQ}
		}
	case 97:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:507
		{
			PkVAL.node = &Node{stype: MULEQ}
		}
	case 98:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:508
		{
			PkVAL.node = &Node{stype: DIVEQ}
		}
	case 99:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:509
		{
			PkVAL.node = &Node{stype: OREQ}
		}
	case 100:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:510
		{
			PkVAL.node = &Node{stype: AMPEQ}
		}
	case 101:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:511
		{
			PkVAL.node = &Node{stype: XOREQ}
		}
	case 102:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:512
		{
			PkVAL.node = &Node{stype: RSHIFTEQ}
		}
	case 103:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:513
		{
			PkVAL.node = &Node{stype: LSHIFTEQ}
		}
	case 104:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:514
		{
			PkVAL.node = &Node{
				stype:    '=',
				children: []*Node{},
			}
		}
	case 105:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:521
		{
			PkVAL.node = nil
		}
	case 107:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:524
		{
			PkVAL.node = &Node{
				stype:    '?',
				children: []*Node{},
			}
		}
	case 108:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:531
		{
			PkVAL.node = nil
		}
	case 109:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:534
		{
			PkVAL.node = &Node{
				stype:    PRMLIST,
				children: []*Node{PkDollar[1].node, nil},
			}
		}
	case 110:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:540
		{
			PkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{PkDollar[1].node, nil},
			}
		}
	case 111:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:546
		{
			PkVAL.node = &Node{
				stype:    PRMLIST,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 112:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:553
		{
			PkVAL.node = &Node{
				stype:    PARAM,
				children: []*Node{PkDollar[1].node},
			}
		}
	case 113:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:560
		{
			PkVAL.node = nil
		}
	case 115:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:562
		{
			PkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{},
			}
		}
	case 116:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:568
		{
			PkVAL.node = &Node{
				stype:    DOTDOTDOT,
				children: []*Node{PkDollar[1].node},
			}
		}
	case 117:
		PkDollar = PkS[Pkpt-4 : Pkpt+1]
//line pk.y:574
		{
			PkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{PkDollar[3].node},
			}
		}
	case 118:
		PkDollar = PkS[Pkpt-6 : Pkpt+1]
//line pk.y:580
		{
			PkVAL.node = &Node{
				stype:    VARG,
				children: []*Node{PkDollar[1].node, PkDollar[5].node},
			}
		}
	case 120:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:588
		{
			PkVAL.node = &Node{
				stype:    ',',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 121:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:595
		{
			PkVAL.node = &Node{
				stype:    ARRITEMEQ,
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	case 122:
		PkDollar = PkS[Pkpt-0 : Pkpt+1]
//line pk.y:602
		{
			PkVAL.node = nil
		}
	case 123:
		PkDollar = PkS[Pkpt-1 : Pkpt+1]
//line pk.y:603
		{
			PkVAL.node = PkDollar[1].node
		}
	case 124:
		PkDollar = PkS[Pkpt-3 : Pkpt+1]
//line pk.y:604
		{
			PkVAL.node = &Node{
				stype:    ',',
				children: []*Node{PkDollar[1].node, PkDollar[3].node},
			}
		}
	}
	goto Pkstack /* stack new state and value */
}
